import org.gradle.internal.os.OperatingSystem

plugins {
    id 'java-library'
    id 'com.adarshr.test-logger' version '2.0.0'
}

apply from: 'tag_version.gradle'

allprojects {
    group 'org.rocstreaming.roctoolkit'
    version tagVersion
}

repositories {
    mavenCentral()
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.6.1'
}

ext {
    os = getOsName()
    platform = System.getProperty("platform") ?: os
    architecture = System.getProperty("host") ?: System.getProperty("os.arch")
    targetLibraryPath = "${project.buildDir}/libs/${platform}/${architecture}"
    nativeHeadersPath = project(":roc_jni").projectDir.getAbsolutePath() + "/src/main/public"
}

task generateHeaders(dependsOn: 'classes') {
    description 'Generate JNI headers from Java classes'

    def sourceDir = file("${project.rootDir}/src/main/java")
    def classesDir = file("${project.buildDir}/classes/java/main")

    if (!classesDir.exists())
        classesDir.mkdirs()

    sourceDir.eachFileRecurse { f ->
        if (!f.directory && f.name.endsWith(".java")) {
            exec {
                commandLine "javac", "-h", nativeHeadersPath, "-classpath", sourceDir, f, "-d", classesDir
            }
        }
    }
}

task copyNativeDeps(type: Copy) {
    from(project(":roc_jni").buildDir.getAbsolutePath() + "/lib/main/debug")
    into targetLibraryPath
    dependsOn ":roc_jni:build"
}

jar.dependsOn copyNativeDeps

test {
    dependsOn assemble

    systemProperty "java.library.path", targetLibraryPath

    useJUnitPlatform {
        includeEngines 'junit-jupiter'
    }
}

testlogger {
    theme 'mocha'
    showStandardStreams = false
    slowThreshold 5000
}

javadoc {
    options.overview = "${project.rootDir}/docs/javadoc/overview.html"
    options.memberLevel = System.getProperty("visibility") == "private" ? JavadocMemberLevel.PRIVATE : JavadocMemberLevel.PUBLIC
}

static def getOsName() {
    final def currentOs = OperatingSystem.current()
    if (currentOs.isMacOsX()) {
        return "darwin"
    } else if (currentOs.isLinux()) {
        return "linux"
    } else if (currentOs.isWindows()) {
        return "win32"
    } else if (currentOs.is(OperatingSystem.FREE_BSD)) {
        return "freebsd"
    } else if (currentOs.is(OperatingSystem.SOLARIS)) {
        return "solaris"
    }
    return System.getProperty("os.name").toLowerCase(Locale.ENGLISH)
}